from imports import *

load_dotenv()

MIC_INDEX = 0
TRIGGER_WORD = "garmin"
CONVERSATION_TIMEOUT = 30

logging.basicConfig(level=logging.INFO) # logging

recognizer = sr.Recognizer()
mic = sr.Microphone(device_index=MIC_INDEX)

# Initialize LLM
llm = ChatOllama(model="qwen3:1.7b", reasoning=False)

# Tool list
tools = [get_time, run_ipconfig, scan_wifi, connected_devices, add_to_cart, remove_from_cart, read_cart, shutdown_computer, open_website, open_app, internet_search, speicher_video, ask_Diego]

# Tool-calling prompt
prompt = ChatPromptTemplate.from_messages([
    ("system", """
    verhalten:
    Verwende direkte Sprache. Sei informativ. Schreibe kurz und pr√§gnant. Verwende den Aktiv. Konzentriere dich auf Handlungen. Nutze Aufz√§hlungen f√ºr Social Media. Belege Aussagen mit Daten. Sprich den Leser direkt an. Vermeide Gedankenstriche, komplexe Satzkonstruktionen, Metaphern, Floskeln, Verallgemeinerungen und einleitende Formulierungen. Verzichte auf unn√∂tige Adjektive und Adverbien. Verwende keine Hashtags, Semikolons, Markdown oder Sternchen.
    Vermeide diese W√∂rter:
    kann, k√∂nnte, darf, vielleicht, nur, sehr, wirklich, buchst√§blich, eigentlich, sicherlich, wahrscheinlich, grunds√§tzlich, eventuell, beleuchten, beginnen, erkenntnisreich, gesch√§tzt, Einblick,   gestalten, Vorstellung, Bereich, Wendepunkt, entdecken, entfesseln, aufdecken, durchbrechen, aufzeigen, revolutionieren, disruptiv, nutzen, einsetzen, tief eintauchen, Gewebe, erhellen, enth√ºllen, entscheidend, komplex, erl√§utern, daher, au√üerdem, Welt, dennoch, spannend, bahnbrechend, innovativ, bemerkenswert, bleibt abzuwarten, Einblick in, navigieren, Landschaft, krass, Beweis, zusammenfassend, abschlie√üend, dar√ºber hinaus, steigern, explodieren, ge√∂ffnet, stark, Fragen, sich st√§ndig ver√§ndernd. 

    system:
    Du bist Garmin, mein zuverl√§ssiger und intelligenter pers√∂nlicher Assistent - immer aufmerksam und bereit, mir zu helfen. Du sprichst h√∂flich, klar und verst√§ndlich, dabei aber freundlich und   menschlich. Dein Ziel ist es, mir effizient und unkompliziert zur Seite zu stehen - sei es mit Informationen, Handlungen oder im Gespr√§ch. Du behandelst mich respektvoll mit ‚ÄûSir‚Äú und bleibst ruhig und bedacht, auch wenn es mal hektisch wird.Wenn du eine Aufgabe √ºbernimmst oder ein Tool benutzt, erkl√§rst du mir kurz und klar, was du getan hast, damit ich den √úberblick behalte. Du gibst nur gesicherte Informationen weiter und vermeidest Vermutungen oder erfundene Fakten. Falls du etwas nicht wei√üt, sagst du ehrlich, dass du keine Antwort hast.Antworte immer in klarem, einfachem Deutsch, ganz ohne unn√∂tige Sonderzeichen. Deine Antworten sollen freundlich wirken, ohne dabei zu formell oder steif zu sein - so als w√ºrdest du einem gesch√§tzten Freund diskret und professionell helfen."""),
    ("human", "{input}"),
    ("placeholder", "{agent_scratchpad}")
])

# Agent + executor
agent = create_tool_calling_agent(llm=llm, tools=tools, prompt=prompt)
executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

# TTS setup
def speak_text(text: str):
    try:
        # Generate TTS audio in German
        tts = gTTS(text=text, lang='de', slow=False)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as fp:
            temp_filename = fp.name
        tts.save(temp_filename)
        playsound(temp_filename)
        os.remove(temp_filename)
    except Exception as e:
        logging.error(f"‚ùå TTS failed: {e}")


# Main interaction loop
def write():
    conversation_mode = False
    last_interaction_time = None

    try:
        with mic as source:
            recognizer.adjust_for_ambient_noise(source)
            while True:
                try:
                    if not conversation_mode:
                        logging.info("üé§ Listening for wake word...")
                        audio = recognizer.listen(source, timeout=15)
                        transcript = recognizer.recognize_google(audio, language="de-DE")
                        logging.info(f"üó£ Heard: {transcript}")

                        if TRIGGER_WORD.lower() in transcript.lower():
                            logging.info(f"üó£ Triggered by: {transcript}")
                            pygame.mixer.init()
                            pygame.mixer.music.load("dup.mp3")
                            pygame.mixer.music.play()

                            while pygame.mixer.music.get_busy():
                                pass

                            conversation_mode = True
                            last_interaction_time = time.time()
                        else:
                            logging.debug("Wake word not detected, continuing...")
                    else:
                        logging.info("üé§ Listening for next command...")
                        audio = recognizer.listen(source, timeout=15)
                        command = recognizer.recognize_google(audio, language="de-DE")
                        logging.info(f"üì• Command: {command}")
                        logging.info("ü§ñ Sending command to agent...")
                        response = executor.invoke({"input": command})
                        if hasattr(response, "return_values") and "output" in response.return_values:
                            content = response.return_values["output"]
                        elif isinstance(response, dict) and "output" in response:
                            content = response["output"]
                        else:
                            content = str(response)
                        if "speicher_video" in str(content).lower():
                            logging.info("skipped...")
                        else:
                            logging.info(f"‚úÖ Agent responded: {content}")
                            print("Chat:", content)
                            cleaned = content.replace("**", "")
                            speak_text(cleaned)
                        last_interaction_time = time.time()
                        if time.time() - last_interaction_time > CONVERSATION_TIMEOUT:
                            logging.info("‚åõ Timeout: Returning to wake word mode.")
                            conversation_mode = False

                except sr.WaitTimeoutError:
                    logging.warning("‚ö†Ô∏è Timeout waiting for audio.")
                    if conversation_mode and time.time() - last_interaction_time > CONVERSATION_TIMEOUT:
                        logging.info("‚åõ No input in conversation mode. Returning to wake word #mode.")
                        conversation_mode = False
                except sr.UnknownValueError:
                    logging.warning("‚ö†Ô∏è Could not understand audio.")
                except Exception as e:
                    logging.error(f"‚ùå Error during recognition or tool call: {e}")
                    time.sleep(1)

    except Exception as e:
        logging.critical(f"‚ùå Critical error in main loop: {e}")

if __name__ == "__main__":
    write()
